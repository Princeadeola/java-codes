As the name suggests, data types specify the type of data that can be
stored inside variables in Java.


Box ----------------- Variable
Phone---------------- DataType
Iphone 13 ----------- Variable name

int NumberOfPhones = 2;


Java is a statically-typed language. This means that all variables must be
declared before they can be used.

There are 8 Primitive Data Types
boolean data type
byte data type
char data type
short data type
int data type
long data type
float data type
double data type


1. boolean type
The boolean data type has two possible values, either true or false.
Default value: false.
They are usually used for true/false conditions.

2. byte type
The byte data type can have values from -128 to 127 (8-bit signed two's complement integer).
If it's certain that the value of a variable will be within -128 to 127, then it is used
instead of int to save memory.
Default value: 0


3. short type
The short data type in Java can have values from -32768 to 32767 (16-bit signed two's complement integer).
If it's certain that the value of a variable will be within -32768 and 32767, then it is used instead of other integer data types (int, long).
Default value: 0

4. int type
The int data type can have values from -231 to 2^31-1 (32-bit signed two's complement integer).
If you are using Java 8 or later, you can use an unsigned 32-bit integer. This will have a minimum value of 0 and a maximum value of 232-1. To learn more, visit How to use the unsigned integer in java 8?
Default value: 0

5. long type
The long data type can have values from -263 to 263-1 (64-bit signed two's complement integer).
If you are using Java 8 or later, you can use an unsigned 64-bit integer with a minimum value of 0 and a maximum value of 264-1.
Default value: 0

6. double type
The double data type is a double-precision 64-bit floating-point.
It should never be used for precise values such as currency.
Default value: 0.0 (0.0d)

7. float type
The float data type is a single-precision 32-bit floating-point. Learn more about single-precision and double-precision floating-point if you are interested.
It should never be used for precise values such as currency.
Default value: 0.0 (0.0f)

8. char type
It's a 16-bit Unicode character.
The minimum value of the char data type is '\u0000' (0) and the maximum value of the is '\uffff'.
Default value: '\u0000'






Non-Primitive Datatypes
Non-Primitive data types refer to objects and hence they are called reference types.
Examples of non-primitive types include Strings, Arrays, Classes, Interface, etc.

Letâ€™s now understand these non-primitive data types in short.

Strings: String is a sequence of characters. But in Java, a string is an object that
represents a sequence of characters. The java.lang.String class is used to create a
string object. If you wish to know more about Java Strings, you can refer to this article
on Strings in Java.

Arrays: Arrays in Java are homogeneous data structures implemented in Java as objects.
Arrays store one or more values of a specific data type and provide indexed access to
store the same. A specific element in an array is accessed by its index. If you wish to
learn Arrays in detail, then kindly check out this article on Java Arrays.

Classes: A class in Java is a blueprint which includes all your data. A class contains
fields(variables) and methods to describe the behavior of an object.

Interface: Like a class, an interface can have methods and variables, but the methods
declared in interface are by default abstract (only method signature, no body).



Difference between primitive and non-primitive data types
The difference between primitive and non-primitive data types are as follows:

1. Primitive types are predefined in Java. Non-primitive types are created by the
programmer and is not defined by Java.
2. Non Primitive types can be used to call methods to perform certain operations,
while primitive types cannot.
3. A primitive type always has a value, whereas non-primitive types can be null.
4. A primitive type starts with a lowercase letter, while non-primitive types start
with an uppercase letter.
5. The size of a primitive type depends on the data type, while non-primitive types have
all the same size.