What is a Java Thread
A thread, in the context of Java, is the path followed when executing a program.
All Java programs have at least one thread, known as the main thread, which is created
by the Java Virtual Machine (JVM) at the program’s start, when the main() method is
invoked with the main thread.

A single-threaded application has only one thread and can handle only one task at a time.
To handle multiple tasks in parallel, multi-threading is used: multiple threads are created,
each performing a different task.


Let explain some terms
Multitasking vs Multithreading vs Multiprocessing vs parallel processing
-If you are new to java you may get confused among these terms as they are used
quite frequently when we discuss multithreading. Let’s talk about them in brief.

-Multitasking: Ability to execute more than one task at the same time is known
as multitasking.

-Multithreading: We already discussed about it. It is a process of executing multiple
threads simultaneously. Multithreading is also known as Thread-based Multitasking.

-Multiprocessing: It is same as multitasking, however in multiprocessing more than one
CPUs are involved. On the other hand one CPU is involved in multitasking.

-Parallel Processing: It refers to the utilization of multiple CPUs in a single
computer system.


Life Cycle of a Thread
New
Runnable
Running
Non-Runnable (Blocked)
Terminated

1. New :-
In this state, a new thread begins its life cycle. This is also called a born thread.
The thread is in the new state if you create an instance of Thread class but before the
invocation of the start() method.

2. Runnable : A thread becomes runnable after a newly born thread is started.
In this state, a thread would be executing its task.

3. Running : When the thread scheduler selects the thread then, that thread would
be in a running state.

4. Non-Runnable (Blocked) : The thread is still alive in this state, but currently,
it is not eligible to run.

5. Terminated: A thread is terminated due to the following reasons:
-Either its run() method exists normally, i.e., the thread’s code has executed the program.
-Or due to some unusual errors like segmentation fault or an unhandled exception.
-A thread that is in a terminated state does not consume ant cycle of the CPU.


Creating a thread in Java
There are two ways to create a thread in Java:
1) By extending Thread class.
2) By implementing Runnable interface.

getName(): It is used for Obtaining a thread’s name
getPriority(): Obtain a thread’s priority
isAlive(): Determine if a thread is still running
join(): Wait for a thread to terminate
run(): Entry point for the thread
sleep(): suspend a thread for a period of time
start(): start a thread by calling its run() method




